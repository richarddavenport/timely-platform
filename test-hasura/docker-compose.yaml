version: "3.6"
services:
  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_PASSWORD: postgres
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 2s
      retries: 10
    volumes:
      - ./scripts/postgres:/docker-entrypoint-initdb.d/

  graphql-engine:
    image: hasura/graphql-engine:v2.1.1
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgres@db:5432/postgres
      TIMELY_DB: postgres://postgres:postgres@db:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      # HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: timelyisawesome
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_JWT_SECRET: >-
        {"type":"HS256", "key":
        "jhyu89jiuhyg7678hoijhuytf7ghjiasodibagsdga9dha8os7df97a6sdgh9asudgo7f7g8h1uuoyafsod8pgasipdg8aps9dhaiaisydg8agsd87gasd9oihasd87gas78d"}
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "apt-get update -y && apt-get install -y curl && curl --fail http://localhost:8080/healthz || exit 1"
        ]
      interval: 5s
      retries: 5
      start_period: 5s
      timeout: 5s

  hasura-console:
    build:
      context: .
    container_name: timely_hasura_console
    ports:
      - "9693:9693"
      - "9695:9695"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@db:5432/postgres
      HASURA_GRAPHQL_ENDPOINT: http://127.0.0.1:8080
      HASURA_GRAPHQL_ADMIN_SECRET: timelyisawesome
    volumes:
      - ./migrations:/usr/src/hasura/migrations
      - ./metadata:/usr/src/hasura/metadata
      - ./seeds:/usr/src/hasura/seeds
    depends_on:
      graphql-engine:
        condition: service_healthy

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "9001:80"
    restart: always
    volumes:
      - ./pgadmin4/pgadmin4.db:/var/lib/pgadmin/pgadmin4.db
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: password

  # hasura-backend-plus:
  #   image: "nhost/hasura-backend-plus:latest"
  #   depends_on:
  #     graphql-engine:
  #       condition: service_healthy
  #   restart: always
  #   ports:
  #     - "4000:4000"
  #   environment:
  #     HOST: 0.0.0.0
  #     PORT: 4000
  #     DATABASE_URL: >-
  #       postgres://postgres:postgres@db:5432/postgres
  #     SERVER_URL: "http://localhost:4000"
  #     HASURA_ENDPOINT: "http://graphql-engine:8080/v1/graphql"
  #     HASURA_GRAPHQL_ADMIN_SECRET: timelyisawesome
  #     JWT_KEY: >-
  #       jhyu89jiuhyg7678hoijhuytf7ghjiasodibagsdga9dha8os7df97a6sdgh9asudgo7f7g8h1uuoyafsod8pgasipdg8aps9dhaiaisydg8agsd87gasd9oihasd87gas78d
  #     JWT_ALGORITHM: HS256
  #     ALLOWED_REDIRECT_URLS: "http://localhost"
  #     JWT_CUSTOM_FIELDS: ""
  #     S3_ENDPOINT: "minio:9000"
  #     S3_SSL_ENABLED: "false"
  #     S3_BUCKET: nhost
  #     S3_ACCESS_KEY_ID: 5a7bdb5f42c41e0622bf61d6e08d5537
  #     S3_SECRET_ACCESS_KEY: 9e1c40c65a615a5b52f52aeeaf549944ec53acb1dff4a0bf01fb58e969f915c8
  #     AUTO_ACTIVATE_NEW_USERS: "true"
  #     PROVIDER_SUCCESS_REDIRECT: "http://localhost:3001/success"
  #     PROVIDER_FAILURE_REDIRECT: "http://localhost:3001/failed"
  #     HIBP_ENABLED: "false"
  #     DEFAULT_ALLOWED_USER_ROLES: "user,me"
  #     ALLOWED_USER_ROLES: "user,me"
  #     REGISTRATION_CUSTOM_FIELDS: "display_name"
  #     COOKIE_SECURE: "false"
  #     COOKIE_SECRET: "somelongvalue"
  #     REDIRECT_URL_SUCCESS: "http://localhost:3000"
  #     REDIRECT_URL_ERROR: "http://localhost:3000/fail"

  # minio:
  #   image: "minio/minio:RELEASE.2020-06-18T02-23-35Z"
  #   user: "999:1001"
  #   restart: always
  #   environment:
  #     MINIO_ACCESS_KEY: 5a7bdb5f42c41e0622bf61d6e08d5537
  #     MINIO_SECRET_KEY: 9e1c40c65a615a5b52f52aeeaf549944ec53acb1dff4a0bf01fb58e969f915c8
  #   entrypoint: sh
  #   command: -c 'mkdir -p /data/nhost && /usr/bin/minio server /data'
  #   ports:
  #     - "9000:9000"
  #   volumes:
  #     - "./minio:/data"
